#File Name Rules: Student_ID_SIS Login ID_File Name
import os
import glob
import sys
import gradeSettings
import re
import csv
import subprocess
from openpyxl import Workbook
from webview import WebView
from quiet import quiet
from outputCon import outputControl
from gradeParser import gradeParser
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO


class Grader():
    """Summary:

    This is an Auto Grader for CS 301 Course in UW Madison. It will automatically check whether
    the script and output satisfies our requirement.

    """
    def __init__(self):
        self.scriptRegPat = [re.compile(exp) for (exp,reason) in gradeSettings.SCRIPT_REG_EXP]
        self.stdResRegPat = [re.compile(exp)for (exp,reason) in gradeSettings.OUTPUT_RESULT_REG_EXP]
        self.scriptExistenceRegPat = [re.compile(exp) for (exp,reason) in gradeSettings.SCRIPT_EXISTENCE_REG_EXP]
        self.partnerNamePat = re.compile('#[\s\S]*?[pP]artner(.*?)\n')
        self.name2sid = {}

    def loadNameTable(self):
        """Load NameTable in case student didn't put their name in scripts. Need nameTable.csv generated by Canvas."""
        self.sid2name = {}
        self.sid2section = {}
        with open('../NameTable.csv','rb') as csvfile:
            spamreader = csv.reader(csvfile, delimiter = ',')
            for row in spamreader:
                self.sid2name[row[1]] = row[0]
                self.sid2section[row[1]] = row[3]
        sections = set(self.sid2section.values())
        self.output = outputControl(sections, gradeSettings.ASSIGNMENT_NAME)
    
    def partnerName(self, script):
        name = self.partnerNamePat.findall(script)
        if name:
            loc = name[0].find(':')
            return name[0][loc + 1:] if loc >= 0 else None
        else:
            return None

    def decomposeFileName(self, fileName):
        tokens = fileName.split('_')
        sid = tokens[2] if tokens[1] == 'late' else tokens[1]
        submissionNum = tokens[3] if tokens[1] == 'late' else tokens[2]
        return tokens[0], sid, submissionNum

    def loadFiles(self, fileList):
        self.loadNameTable()
        parser = gradeParser(gradeSettings.GRADING_RULES)
        for fileName in fileList:
            errorInfo = ''
            studentName, sid, submissionNum = self.decomposeFileName(fileName)
            studentName = self.sid2name[sid]
            section = self.sid2section[sid]
            
            with open(fileName + '.py','r') as fr:
                script = fr.read()
                partner = self.partnerName(script)
            funcRes = self.testFunction(fileName, sid, submissionNum)
            # print studentName, funcRes
            grading, errorMessage, stdOutput = parser.parse(funcRes, None)
            # print grading
            self.output.insert(studentName, sid, submissionNum, partner, section, errorMessage, grading, stdOutput, fileName)
        self.output.dump()

    def testFunction(self, fileName, sid, submissionNum):
        old_stdout = sys.stdout
        old_stdin = sys.stdin
        res = {}
        returnVal = None
        stdPat = None
        systemExitFlag = None
        print fileName
        quiet(fileName + '.py', '../temp/f' + sid + '_' + submissionNum + '.py', True)
       
        for key, tests in gradeSettings.TEST_FUNC.iteritems():
            sys.stdout = old_stdout
            print 'Now Test:',key
            res[key] = []
            # if key == 'main':
            #    continue
            for test in tests:
                ret = None
                testRes = {}
                sys.stdout = mystdout = StringIO()
                if 'input_file' in test.keys():
                    sys.stdin = mystdin = open('../tester/' + test['input_file'])
                inputArgs = () if 'input_args' not in test.keys() else test['input_args']
                try:
                    if key == 'main':
                        d = dict(locals(), **globals())
                        execfile(fileName + '.py',d ,d)
                    else:
                        exec('from temp.f{0}_{1} import {2}'.format(sid, submissionNum, key))
                        exec("ret = {0}(*inputArgs)".format(key))
                except SystemExit as se:
                    if 'systemExit' not in test.keys():
                        testRes['runtime_error'] = True
                        testRes['runtime_error_message'] = str(se)
                    sys.stdout = old_stdout
                    print 'SystemExit Catched. Output:', mystdout.getvalue()
                except Exception as e:
                    sys.stdout = old_stdout
                    print 'OtherException Catched.'
                    testRes['runtime_error'] = True
                    testRes['runtime_error_message'] = str(e)
                if 'return_val' in test.keys():
                    try:
                        if ret != None:
                            if type(test['return_val']) is float:
                                testRes['return_val'] = abs(ret - test['return_val']) < 0.01
                            else:
                                testRes['return_val'] = ret == test['return_val']
                        else:
                            testRes['return_val'] = False
                        testRes['student_return_val'] = ret
                    except:
                        testRes['return_val'] = False
                        testRes['student_return_val'] = None
                if 'stdout_pat' in test.keys():
                    testRes['stdout_pat'] = re.search(test['stdout_pat'], mystdout.getvalue()) != None
                    testRes['student_output'] = mystdout.getvalue()
                res[key].append(testRes)
        
        
        sys.stdout = old_stdout
        sys.stdin = old_stdin
        print res
        return res


                  

if __name__ == "__main__":
    os.chdir(os.getcwd() + "/submissions")
    a = Grader()
    a.loadFiles([name[:-3] for name in [file_name for file_name in glob.glob("*.py")]])



